---
title: "Chasten Your Python Program: Configurable Program Analysis and Linting with XPath" 
date: "2025-07-26"
date-format: long
author: "Gregory M. Kapfhammer"
format: 
  revealjs:
    theme: default
    menu: false
    preview-links: true
    slide-number: false
    incremental: false 
    code-copy: false
    code-fold: true
    code-tools: true
    code-link: true
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "PyOhio 2025"
    css: ../../css/styles.css
---

## Access resources during the talk!

<!-- This is the command used to create the QR code: -->

<!-- qrencode -t SVG -s 10 -o qrcode.svg 'https://gkapfham.github.io/PyOhio2025-Presentations/slides/chasten/' -->

::: {style="text-align: center; margin-top: 0em;"}

Scan the QR code to follow along

::: {.fragment .fade-in style="text-align: center; margin-top: -0.5em;"}

![](qrcode.svg){width=50%}

:::

:::

## What is `chasten`? Why did we build it?

![](chasten.svg)

::: {.incremental style="font-size: 0.85em; margin-top: -0.35em;"}

- Configurable **program analysis** and **linting** with XPath expressions
  - Avoid a unique performance anti-pattern?
  - Confirm the use of a new coding style?
  - Nervous about writing custom AST visitors?
  - Need configuration and data storage?

:::

::: footer
:::

## Chasten helps you automatically detect patterns in Python programs

::: {.columns style="margin-top: 1.25em; font-size: 0.8em;"}

::: {.fragment .column .fade style="margin-top: 0.25em;"}

### {{< iconify fa6-solid code >}} Developers

- Project-specific checks
- Avoid code anti-patterns
- Facilitate code reviews

### {{< iconify fa6-solid flask-vial >}} Researchers

- Count code patterns
- Measure code quality
- Easily share results

:::

::: {.fragment .column style="margin-top: 0.25em;"}

### {{< iconify fa6-solid user-graduate >}} Students

- Explore different code style
- Avoid performance problems
- Confirm project criteria

### {{< iconify fa6-solid person-chalkboard >}} Educators 

- Give early feedback on code style
- Enforce assignment requirements
- Support use on laptops and in CI

:::

:::

## Example: students and educators using `chasten` for a Python project

::: {.incremental style="font-size: 0.85em; margin-top: -0.25em;"}

- Students may struggle to write **efficient** and **readable** Python code
- Manual review by instructors is **time-consuming** and **error-prone**
- Regex is **brittle** and AST-based tools are **hard to prototype**

:::

::: {.fragment .fade style="margin-top: -0.25em; font-size: 0.9em;"}

{{< iconify fa6-solid lightbulb >}} **Project Goal**: `chasten` enables
**scalable** and **structure-aware** feedback that effectively **supports** both
**instructors** and **students**

:::

::: {.fragment .fade style="margin-top: 0.5em; font-size: 0.9em;"}

{{< iconify fa6-solid gears >}} **Take a Step Back**: Before diving into the
implementation of `chasten`, it's worth surveying the landscape of **linting** and
**checking**

:::

::: {.fragment .fade style="margin-top: 0.5em; font-size: 0.9em;"}

{{< iconify mdi:code-not-equal-variant >}} **Many Trade-Offs**: Different tools
with varying implementation, features, performance, and extensibility! Which
one(s) to pick?

:::

## Building a source code analyzer! What are the options and trade-offs?

::: {.columns style="margin-top: 1.25em; font-size: 0.8em;"}

::: {.fragment .column .fade style="margin-top: 0.25em;"}

### Regular Expressions

- Easy to write and try out
- Often brittle and confusing

### Pylint and Flake8

- Extensible with plugins
- Must have AST knowledge

:::

::: {.fragment .column style="margin-top: 0.25em;"}

### Ruff

- Fast and easy to use
- No extension mechanism

### Treesitter and Ast-Grep

- Configurable with patterns
- Less support for tool building

:::

:::

::: {.fragment .fade style="margin-top: -0.1em; font-size: 0.9em;"}

{{< iconify fa6-solid lightbulb >}} Wow, `pyastgrep` offers a novel way query a program's AST!
Is XPATH sufficient? Can this tool support all envisioned use cases?

:::

## Wait, what is an abstract syntax tree?

::: {.columns style="margin-top: 1.25em; font-size: 0.75em;"}

::: {.column .fade width="50%"}

**Python Source Code**

```python
def calculate_sum(x, y):
  """Add two numbers."""
  return x + y
```

**Abstract Syntax Tree**

```python
Module(
  body=[
    FunctionDef(
      name='calculate_sum', 
      args=..., 
      body=[
        Return(
          value=BinOp(
            left=Name(id='x', ...), 
            op=Add(), 
            right=Name(id='y', ...)))], 
      ...)], 
  ...)
```

:::

::: {.column .fade width="50%"}

::: {.fragment .fade style="margin-left: 1.5em; font-size: 0.9em;"}

### {{< iconify fa6-solid brain >}} Understanding the AST

::: incremental

- Tree representation of code
- Nodes are syntax elements
- Great for program analysis
- Independent of code style

:::

:::

::: {.fragment .fade style="margin-left: 1.5em; font-size: 0.9em;"}

### {{< iconify fa6-solid tree >}} AST Analysis Challenges

::: incremental

- Complex structure for code
- Brittle regular expressions
- False positives and negatives
- Need easy way to query
- Avoid bespoke solutions
- Adopt XPATH-like queries

:::

:::

:::

:::

::: footer
:::

## Scanning code with `pyastgrep`

**Define a Python file with functions**

```python
def too_many_args(a, b, c, d, e, f):
def another_function(x, y):
def a_third_function(p, q, r, s, t, u, v):
```

::: {.fragment style="margin-top: 0.45em;"}

**Find functions with more than 5 arguments**

```bash
pyastgrep '//FunctionDef[count(args/args) > 5]' example.py
```

:::

::: {.fragment style="margin-top: 0.45em;"}

**Results from running the query with `pyastgrep`**

```python
example.py:1:1:def too_many_args(a, b, c, d, e, f):
example.py:7:1:def a_third_function(p, q, r, s, t, u, v):
```

:::

::: footer
:::

## Make the connection by comparing the `pyastgrep` and `chasten` tools

::: {.columns style="margin-top: 1.25em; font-size: 0.8em;"}

::: {.column .fade width="50%"}

### {{< iconify mdi search-web >}} `pyastgrep`

- Interactive AST search tool
- Ad-hoc queries from the CLI
- Uses raw XPath expressions
- `grep`-like console output

:::

::: {.column .fade width="50%"}

### {{< iconify mdi cogs >}} `chasten`

- Built using `pyastgrep`'s API
- Runs checks from a YAML file
- Saves results in JSON, CSV, DB
- View results with `datasette`

:::

:::

::: {.fragment .fade .boxed-content style="margin-top: 0.2em; font-size: 0.85em;"}

{{< iconify fa6-solid lightbulb >}} **Key Idea**: `chasten` uses `pyastgrep`'s
powerful search to build a configurable, project-oriented linter. Developers,
researchers, students, and instructors can "`chasten`" 
Python projects and save the results!

:::

## Use `dhv` to explore a Python AST!

::: {.fragment style="margin-left: 2.2em;"}

![](dhv.png){width=95%}

:::

::: footer
:::

## Quick recap of referenced projects

::: {.fragment .fade-down}

::: {.callout-note appearance="minimal" title="Click these links to preview documentation for referenced tools!" collapse="false"}

- [Python `ast` module](https://docs.python.org/3/library/ast.html){.preview-link}: Python's abstract syntax tree module
- [Pylint](https://pylint.org/){.preview-link}: A popular static code analyzer for Python
- [Flake8](https://flake8.pycqa.org/en/latest/){.preview-link}: An extensible wrapper around PyFlakes, pycodestyle, and McCabe
- [Ruff](https://docs.astral.sh/ruff/){.preview-link} - An extremely fast Python linter and code formatter, written in Rust
- [Tree-sitter](https://tree-sitter.github.io/tree-sitter/){.preview-link}: A parser generator tool and incremental parsing library
- [Ast-grep](https://ast-grep.github.io/){.preview-link}: A CLI tool for searching and rewriting code with ASTs
- [Pyastgrep](https://pyastgrep.readthedocs.io/en/latest/){.preview-link}: A tool for searching Python code with XPath expressions
- [Dhv](https://dhv.davep.dev/){.preview-link}: A comprehensive TUI for Python code exploration built with Textual
- [Datasette](https://datasette.io/){.preview-link}: A SQL-based tool for exploring and publishing data to the web

:::

:::

::: {.fragment .fade style="margin-top: 0.75em; font-size: 0.9em;"}

{{< iconify fa6-solid rocket >}} **Next Steps**: Use case for Python project
analysis with `chasten`

:::

::: footer
:::

## Avoid time complexity of $O(n²)$

::: {.columns}
::: {.column width="50%"}

```python
# O(n) is acceptable
seen = set()
for item in items:
    if item in seen:
        return True
    seen.add(item)
```
:::

::: {.column width="50%"}

```python
# O(n²) is not okay
for i in range(len(items)):
    for j in range(len(items)):
        if i != j 
         and items[i] == items[j]:
            return True
```
:::

:::

::: {.incremental .fade style="font-size: 0.9em; margin-top: 0.25em;"}

- {{< iconify fa6-solid lightbulb >}} **Goal**: Automatically scan the source
code that students submit to confirm that there are no inefficient looping
constructs

- {{< iconify mdi:alert-outline >}} **Challenge**: Linters like Ruff and Pylint
don't have rules to detect nested control structures that either are or are not
acceptable

- {{< iconify fa6-solid gears >}} **Build**: An extensible tool allowing
instructors to scan for arbitrary code patterns without detailed AST knowledge

:::

## Chasten to the rescue!

::: {.incremental style="font-size: 0.9em; margin-top: -0.25em;"}

- {{< iconify fa6-solid gear >}} Uses XPath to search Python's AST

- {{< iconify mdi:file-code-outline >}} Rules written in simple YAML

- {{< iconify mdi:file-tree-outline >}} Structure-first, not just style

- {{< iconify mdi:database-outline >}} Outputs to JSON, CSV, or SQLite

:::

::: {.fragment .fade style="font-size: 0.9em; margin-top: -0.25em; margin-bottom: 0.45em;"}

{{< iconify fa6-solid lightbulb >}} **Result**: Instructors define checks once
and use Chasten to easily apply them at scale across all student submissions

:::

:::fragment

```yaml
- name: "nested-loops"
  code: "PERF001"
  pattern: "//For[descendant::For]"
  description: "Detects doubly nested for-loops (e.g., O(n²))"

```
:::

## Let's run `chasten`!

::: {.fragment .fade style="font-size: 0.8em;"}

### Install the Tool

```bash
pipx install chasten  # Install Chasten in venv
pipx list             # Confirm installation
chasten --help        # View available commands
```

:::

::: {.fragment .fade style="font-size: 0.8em; margin-top: 0.5em;"}

### Run Chasten

```bash
chasten analyze time-complexity-lab \
        --config chasten-configuration \
        --search-path time-complexity-lab \
        --save-directory time-complexity-results \
        --save
```

:::

::: {.fragment .fade-down style="font-size: 0.9em; margin-top: 0.15em; margin-bottom: 0.45em;"}

- Save results to a **JSON file** and produce **console output**
- Configure the **return code** for different **detection goals**

:::

## Results from running `chasten`

::: {.fragment .fade style="font-size: 1em;"}

### Nested loop analysis
| Check ID | Check Name     | File           | Matches |
|----------|----------------|----------------|---------|
| PERF001  | nested-loops   | analyze.py     | 1       |
| PERF001  | nested-loops   | display.py     | 7       |
| PERF001  | nested-loops   | main.py        | 0       |


:::

::: {.fragment .fade-down style="font-size: 0.7em; margin-top: 1em;"}

{{< iconify mdi:format-list-numbered >}} **Check ID** → A unique short rule code
(e.g., `PERF001`)

:::

::: {.fragment .fade-down style="font-size: 0.7em;"}

{{< iconify mdi:label-outline >}} **Check Name** → The rule name that matched
(e.g., `nested-loops`)

:::

::: {.fragment .fade-down style="font-size: 0.7em;"}

{{< iconify mdi:file-outline >}} **File** → The Python file that the tool
scanned (e.g., `analyze.py`)

:::

::: {.fragment .fade-down style="font-size: 0.7em;"}

{{< iconify mdi:counter >}} **Matches** → Number of times the pattern was
detected in that file (e.g., `1` match)

:::

## Exploring a bespoke solution

```python
import ast
import json
import os
import sys

class ForVisitor(ast.NodeVisitor):
    """
    An AST visitor that detects doubly-nested for loops.
    """
    def __init__(self, filepath):
        self.filepath = filepath
        self.nested_for_loops = []
        self._for_depth = 0

    def visit_For(self, node):
        """
        Visit a for-loop node in the AST.
        """
        self._for_depth += 1
        if self._for_depth > 1:
            self.nested_for_loops.append({
                "file": self.filepath,
                "line": node.lineno,
                "col": node.col_offset
            })
        self.generic_visit(node)
        self._for_depth -= 1

def analyze_directory(directory):
    """
    Analyze all Python files in a directory for doubly-nested for loops.
    """
    all_nested_loops = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(".py"):
                filepath = os.path.join(root, file)
                with open(filepath, "r", encoding="utf-8") as source_file:
                    try:
                        tree = ast.parse(source_file.read(), filename=filepath)
                        visitor = ForVisitor(filepath)
                        visitor.visit(tree)
                        all_nested_loops.extend(visitor.nested_for_loops)
                    except SyntaxError as e:
                        print(f"Could not parse {filepath}: {e}")
    return all_nested_loops

def main():
    """
    Main function to run the analysis and save the results.
    """
    if len(sys.argv) != 2:
        print("Usage: python double_loops_detect.py <directory>")
        sys.exit(1)

    script_dir = os.path.dirname(os.path.abspath(__file__))
    target_directory = os.path.join(script_dir, '..', sys.argv[1])
    if not os.path.isdir(target_directory):
        print(f"Error: '{target_directory}' is not a valid directory.")
        sys.exit(1)

    results = analyze_directory(target_directory)

    output_filename = "nested_loops.json"
    with open(output_filename, "w", encoding="utf-8") as f:
        json.dump(results, f, indent=2)

    print(f"Analysis complete. Found {len(results)} doubly-nested for-loops.")
    print(f"Results saved to {output_filename}")

if __name__ == "__main__":
    main()
```


## Limitations and Future Directions

::: {.incremental}

- **Limitations of the Chasten Tool**
  - {{< iconify mdi:alert-circle-outline >}} Doesn't handle style, formatting, or
  type inference
  - {{< iconify mdi:timer-sand >}} Not optimized for fast use in continuous
  integration
  - {{< iconify mdi:code-not-equal-variant >}} Pattern matches through use of
  XPath on Python's AST

- **Empirical Study of Chasten**
  - {{< iconify fa6-solid scale-unbalanced-flip >}} Frequency of false positives
  or false negatives?
  - {{< iconify game-icons team-idea >}} How do students respond to the tool's feedback?
  - {{< iconify fa6-solid flask >}} Differences in scores with varied feedback types?

:::

## Key Takeaways

::: {.incremental}

- {{< iconify mdi:pen >}} Write declarative rules for AST-based code checks

- {{< iconify mdi:email-check-outline >}} Focus on bespoke code structure patterns in Python

- {{< iconify mdi:school-outline >}} Automated grading aligned with learning outcomes

- {{< iconify mdi:chart-bar-stacked >}} Generate data-rich insights into student code patterns

:::

::: {.fragment .boxed-content style="font-size: 0.95em;"}

- **Try out Chasten and contribute to its development!**
  - {{< iconify fa6-solid link >}} GitHub: [https://github.com/AstuteSource/chasten](https://github.com/AstuteSource/chasten)
  - {{< iconify fa6-solid code >}} PyPI: [https://pypi.org/project/chasten/](https://pypi.org/project/chasten/)

:::
