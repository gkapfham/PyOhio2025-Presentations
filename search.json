[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PyOhio 2025 Presentations",
    "section": "",
    "text": "Welcome to our collection of conference presentations focusing on educational technology and development tools. These presentations cover various aspects of modern software development, automated testing, and educational technology implementation."
  },
  {
    "objectID": "index.html#available-presentations",
    "href": "index.html#available-presentations",
    "title": "PyOhio 2025 Presentations",
    "section": "Available Presentations",
    "text": "Available Presentations\n\nAutomated and Configurable Programming Project Checking with Chasten\n\nLearn about automated project checking and configuration\nUnderstand how to implement efficient project validation\nExplore best practices for automated testing"
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "PyOhio 2025 Presentations",
    "section": "Getting Started",
    "text": "Getting Started\nEach presentation is available in the slides section. You can navigate through the presentations using the navigation menu above. Each presentation includes:\n\nDetailed slides with code examples\nImplementation guides\nBest practices and recommendations\nAdditional resources and references"
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "PyOhio 2025 Presentations",
    "section": "Contributing",
    "text": "Contributing\nThese presentations are open source and available for educational purposes. Feel free to use and modify them according to your needs. If you find any issues or have suggestions for improvements, please contribute through our GitHub repository."
  },
  {
    "objectID": "slides/index.html",
    "href": "slides/index.html",
    "title": "Slides",
    "section": "",
    "text": "View Presentation\nLearn about automated project checking and configuration\nUnderstand how to implement efficient project validation\nExplore best practices for automated testing\n\n\n\n\n\nUse the navigation menu at the top of the page to move between presentations. Each presentation includes:\n\nDetailed slides with code examples\nImplementation guides\nBest practices and recommendations\nAdditional resources and references"
  },
  {
    "objectID": "slides/index.html#available-presentations",
    "href": "slides/index.html#available-presentations",
    "title": "Slides",
    "section": "",
    "text": "View Presentation\nLearn about automated project checking and configuration\nUnderstand how to implement efficient project validation\nExplore best practices for automated testing"
  },
  {
    "objectID": "slides/index.html#navigation",
    "href": "slides/index.html#navigation",
    "title": "Slides",
    "section": "",
    "text": "Use the navigation menu at the top of the page to move between presentations. Each presentation includes:\n\nDetailed slides with code examples\nImplementation guides\nBest practices and recommendations\nAdditional resources and references"
  },
  {
    "objectID": "slides/chasten/index.html#what-problem-are-we-solving",
    "href": "slides/chasten/index.html#what-problem-are-we-solving",
    "title": "Automated and Configurable Programming Project Checking with Chasten",
    "section": "What Problem Are We Solving?",
    "text": "What Problem Are We Solving?\n\n\nStudents may struggle to write efficient, readable code\nManual project review is time-consuming and error-prone\nMany courses face these challenges:\n\nData structures\nAlgorithm analysis\nSoftware engineering\n\nExisting tools focus on style, not semantic structure\nRegex is brittle, and AST tools are hard to prototype\n\n\n\n Project Goal: Chasten enables scalable and structure-aware feedback that effectively supports both instructors and students"
  },
  {
    "objectID": "slides/chasten/index.html#avoid-time-complexity-of-on²",
    "href": "slides/chasten/index.html#avoid-time-complexity-of-on²",
    "title": "Automated and Configurable Programming Project Checking with Chasten",
    "section": "Avoid Time Complexity of \\(O(n²)\\)",
    "text": "Avoid Time Complexity of \\(O(n²)\\)\n\n\n# O(n) is acceptable\nseen = set()\nfor item in items:\n    if item in seen:\n        return True\n    seen.add(item)\n\n# O(n²) is not okay\nfor i in range(len(items)):\n    for j in range(len(items)):\n        if i != j \n         and items[i] == items[j]:\n            return True\n\n\n\n Goal: Automatically scan the source code that students submit to confirm that there are no inefficient looping constructs\n Challenge: Linters like Ruff and Pylint don’t have rules to detect nested control structures that either are or are not acceptable\n Build: An extensible tool allowing instructors to scan for arbitrary code patterns without detailed AST knowledge"
  },
  {
    "objectID": "slides/chasten/index.html#chasten-to-the-rescue",
    "href": "slides/chasten/index.html#chasten-to-the-rescue",
    "title": "Automated and Configurable Programming Project Checking with Chasten",
    "section": "Chasten to the Rescue!",
    "text": "Chasten to the Rescue!\n\n\n Uses XPath to search Python’s AST\n Rules written in simple YAML\n Structure-first, not just style\n Outputs to JSON, CSV, or SQLite\n\n\n\n Result: Instructors define checks once and use Chasten to easily apply them at scale across all student submissions\n\n\n- name: \"nested-loops\"\n  code: \"PERF001\"\n  pattern: \"//For[descendant::For]\"\n  description: \"Detects doubly nested for-loops (e.g., O(n²))\""
  },
  {
    "objectID": "slides/chasten/index.html#lets-run-chasten",
    "href": "slides/chasten/index.html#lets-run-chasten",
    "title": "Automated and Configurable Programming Project Checking with Chasten",
    "section": "Let’s Run Chasten!",
    "text": "Let’s Run Chasten!\n\nInstall the Tool\npipx install chasten  # Install Chasten in venv\npipx list             # Confirm installation\nchasten --help        # View available commands\n\n\nRun Chasten\nchasten analyze time-complexity-lab \\\n        --config chasten-configuration \\\n        --search-path time-complexity-lab \\\n        --save-directory time-complexity-results \\\n        --save\n\n\n\nSave results to a JSON file and produce console output\nConfigure the return code for different detection goals"
  },
  {
    "objectID": "slides/chasten/index.html#results-from-running-chasten",
    "href": "slides/chasten/index.html#results-from-running-chasten",
    "title": "Automated and Configurable Programming Project Checking with Chasten",
    "section": "Results from Running Chasten",
    "text": "Results from Running Chasten\n\nNested Loop Analysis\n\n\n\nCheck ID\nCheck Name\nFile\nMatches\n\n\n\n\nPERF001\nnested-loops\nanalyze.py\n1\n\n\nPERF001\nnested-loops\ndisplay.py\n7\n\n\nPERF001\nnested-loops\nmain.py\n0\n\n\n\n\n\n Check ID → A unique short rule code (e.g., PERF001)\n\n\n Check Name → The rule name that matched (e.g., nested-loops)\n\n\n File → The Python file that the tool scanned (e.g., analyze.py)\n\n\n Matches → Number of times the pattern was detected in that file (e.g., 1 match)"
  },
  {
    "objectID": "slides/chasten/index.html#limitations-and-future-directions",
    "href": "slides/chasten/index.html#limitations-and-future-directions",
    "title": "Automated and Configurable Programming Project Checking with Chasten",
    "section": "Limitations and Future Directions",
    "text": "Limitations and Future Directions\n\nLimitations of the Chasten Tool\n\n Doesn’t handle style, formatting, or type inference\n Not optimized for fast use in continuous integration\n Pattern matches through use of XPath on Python’s AST\n\nEmpirical Study of Chasten\n\n Frequency of false positives or false negatives?\n How do students respond to the tool’s feedback?\n Differences in scores with varied feedback types?"
  },
  {
    "objectID": "slides/chasten/index.html#key-takeaways",
    "href": "slides/chasten/index.html#key-takeaways",
    "title": "Automated and Configurable Programming Project Checking with Chasten",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\n Write declarative rules for AST-based code checks\n Focus on bespoke code structure patterns in Python\n Automated grading aligned with learning outcomes\n Generate data-rich insights into student code patterns\n\n\n\nTry out Chasten and contribute to its development!\n\n GitHub: https://github.com/AstuteSource/chasten\n PyPI: https://pypi.org/project/chasten/"
  }
]